use std::collections::HashMap;
use std::fs;
use std::path::Path;

use assert_fs::fixture::ChildPath;
use assert_fs::prelude::*;
use snapbox::cmd::Command;

use scarb_test_support::cargo::cargo_bin;
use test_for_each_example::test_for_each_example;

fn get_lockfile_content(name: &str) -> &str {
    let mut lockfiles = HashMap::new();
    lockfiles.insert(
        "dependencies",
        r#"# Code generated by scarb DO NOT EDIT.
version = "1"

[[package]]
name = "alexandria_data_structures"
source = "git+https://github.com/keep-starknet-strange/alexandria.git"
version = [..]
dependencies = [
 "core",
 "test_plugin",
]

[[package]]
name = "alexandria_math"
source = "git+https://github.com/keep-starknet-strange/alexandria.git"
version = [..]
dependencies = [
 "alexandria_data_structures",
 "core",
 "test_plugin",
]

[[package]]
name = "core"
source = "std"
version = [..]

[[package]]
name = "dependencies"
version = "0.1.0"
dependencies = [
 "alexandria_math",
 "core",
 "test_plugin",
]

[[package]]
name = "test_plugin"
source = "std"
version = [..]
"#,
    );
    lockfiles.insert(
        "hello_world",
        r#"# Code generated by scarb DO NOT EDIT.
version = "1"

[[package]]
name = "core"
source = "std"
version = [..]

[[package]]
name = "hello_world"
version = "0.1.0"
dependencies = [
 "core",
 "test_plugin",
]

[[package]]
name = "test_plugin"
source = "std"
version = [..]
"#,
    );
    lockfiles.insert(
        "starknet_hello_world",
        r#"# Code generated by scarb DO NOT EDIT.
version = "1"

[[package]]
name = "core"
source = "std"
version = [..]

[[package]]
name = "starknet"
source = "std"
version = [..]
dependencies = [
 "core",
]

[[package]]
name = "starknet_hello_world"
version = "0.1.0"
dependencies = [
 "core",
 "starknet",
 "test_plugin",
]

[[package]]
name = "test_plugin"
source = "std"
version = [..]
"#,
    );
    lockfiles.insert(
        "starknet_multiple_contracts",
        r#"# Code generated by scarb DO NOT EDIT.
version = "1"

[[package]]
name = "core"
source = "std"
version = [..]

[[package]]
name = "starknet"
source = "std"
version = [..]
dependencies = [
 "core",
]

[[package]]
name = "starknet_multiple_contracts"
version = "0.1.0"
dependencies = [
 "core",
 "starknet",
 "test_plugin",
]

[[package]]
name = "test_plugin"
source = "std"
version = [..]
"#,
    );
    lockfiles.insert(
        "workspaces",
        r#"# Code generated by scarb DO NOT EDIT.
version = "1"

[[package]]
name = "addition"
version = "0.1.0"
dependencies = [
 "core",
 "test_plugin",
]

[[package]]
name = "core"
source = "std"
version = [..]

[[package]]
name = "fibonacci"
version = "0.1.0"
dependencies = [
 "addition",
 "core",
 "test_plugin",
]

[[package]]
name = "starknet"
source = "std"
version = [..]
dependencies = [
 "core",
]

[[package]]
name = "test_plugin"
source = "std"
version = [..]

[[package]]
name = "workspaces"
version = "0.1.0"
dependencies = [
 "addition",
 "core",
 "fibonacci",
 "starknet",
 "test_plugin",
]
"#,
    );
    lockfiles[name]
}

#[test_for_each_example]
fn create_lockfile_simple(example: &Path) {
    let lockfile = ChildPath::new(example.join("Scarb.lock"));
    if lockfile.exists() {
        fs::remove_file(&lockfile)
            .unwrap_or_else(|_| panic!("failed to remove {}", lockfile.to_str().unwrap()));
    }

    lockfile.assert(predicates::path::missing());

    Command::new(cargo_bin("scarb"))
        .arg("fetch")
        .current_dir(example)
        .assert()
        .success();

    let example_name = example.file_name().unwrap().to_str().unwrap();
    lockfile.assert(predicates::path::exists());
    Command::new("cat")
        .arg(lockfile.path())
        .assert()
        .success()
        .stdout_matches(get_lockfile_content(example_name));
}
